"""
У практиці програмування досить часто використовують Керівні символи . 
Це символи в кодуванні для яких немає графічного представлення, 
але які використовуються для керування пристроями, організації передачі даних та інших цілей.

Ось основні керівні символи:

Позначення у коді	Опис
\n	Переведення рядка
\f	Переведення сторінки
\r	Повернення каретки
\t	Горизонтальна табуляція
\v	Вертикальна табуляція

Для того, щоб можна було вводити ці символи, додають символ, що екранує '\', 
який означає, що наступний за ним знак треба сприймати як спеціальний символ, 
а не буквально як він є.

Ці символи ми будемо активно використовувати в наступному модулі при роботі з текстовими файлами.
"""
'''
Напишіть функцію real_len, яка підраховує та повертає довжину рядка без наступних керівних символів: [\n, \f, \r, \t, \v]

Для перевірки правильності роботи функції real_len їй будуть передані наступні рядки:

'Alex\nKdfe23\t\f\v.\r'
'Al\nKdfe23\t\v.\r'
'''
def real_len(text):
    control_characters = {'\n', '\f', '\r', '\t', '\v'}
    length = 0

    for char in text:
        if char not in control_characters:
            length += 1

    return length

# Перевірка функції
string1 = 'Alex\nKdfe23\t\f\v.\r'
string2 = 'Al\nKdfe23\t\v.\r'

result1 = real_len(string1)
result2 = real_len(string2)

print(f"Довжина рядка 1 без керівних символів: {result1}")
print(f"Довжина рядка 2 без керівних символів: {result2}")
# Ця функція real_len проходить через кожен символ у вхідному рядку і додає до довжини тільки ті символи, які не є керівними символами (перенос рядка, табуляція тощо). Потім повертає обчислену довжину.





 
            
    
