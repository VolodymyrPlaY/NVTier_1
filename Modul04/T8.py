"""
Іноді потрібно зберегти велику кількість словників у списку або зберегти список як значення елемента словника. Створення складних структур такого роду називається вкладенням.

Наприклад, можна створити список користувачів, в якому кожен елемент є словником з інформацією про користувача. Наступний код будує список із трьох користувачів:

user_1 = {"name": "Jane", "age": 21}
user_2 = {"name": "Moris", "age": 23}
user_3 = {"name": "Steve", "age": 24}

persons = [user_1, user_2, user_3]

for user in persons:
    for field in user:
        print(user.get(field))
Вивід ми отримаємо наступний:

Jane
21
Moris
23
Steve
24
Іноді зручно помістити список у словник. Наприклад, ми описуємо у програмі рецепт. Якщо обмежитися тільки списком, зберегти вийде лише список інгредієнтів. При використанні словника список інгредієнтів може бути всього лише одним з полів опису рецепта.

Можна для деяких завдань вкладати списки в списки, головне пам'ятати, що глибина вкладення списків та словників не повинна бути великою. Якщо вам доводиться вкладати елементи на глибину істотно більшу, ніж у два-три рази, швидше всього, завдання має простіше рішення. Ми все ж таки живемо у тривимірному світі, хіба що ви Шелдон Лі Купер, займаєтеся теорією струн і у вас конструкція 11-мірної супергравітації :)
"""
'''
Потрібно написати функцію реалізації наступного ігрового алгоритму. На вхід функції game подається два аргументи: список, що складається зі списків, та початкове значення power - енергія гравця. Внутрішні списки — це списки з числовим значенням енергії, які може поглинути гравець, якщо вони менші або дорівнюють його енергії. Після поглинання елементу списку він рухається за списком далі та, або поглинає список повністю до кінця, або, якщо знаходить енергію вище за власну, залишає його і переходить до наступного списку. Наприкінці обходу всіх списків функція повинна повернути загальну отриману енергію гравця.

Приклад списку:

[[1, 1, 5, 10], [10, 2], [1, 1, 1]]
Для цього списку і початкової енергії рівної 1 гравець поглине з першого списку перші два значення і залишить його, зустрівши значення 5, через те, що на цей момент матиме енергію в 3. Другий список пропустить відразу, а третій повністю поглине та отримає остаточну енергію в 6.
'''
def game(terra, power):
    for sublist in terra:
        for value in sublist:
            if value <= power:
                power += value
            else:
                break  # При переході до наступного списку, якщо енергія вже недостатня

    return power

# Приклад використання:
terra = [[1, 1, 5, 10], [10, 2], [1, 1, 1]]
initial_power = 1
result = game(terra, initial_power)
print("Загальна отримана енергія гравця:", result)
# Ця функція пройде через кожен внутрішній список в terra та кожне значення в цьому списку. Якщо значення менше або дорівнює поточній енергії гравця, то це значення поглинається, і енергія збільшується. Якщо значення виявляється більше поточної енергії, гравець переходить до наступного списку. Функція повертає загальну отриману енергію гравця.