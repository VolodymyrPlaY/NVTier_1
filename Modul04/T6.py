"""
Кортежі служать для зберігання кількох об'єктів разом. Їх можна розглядати як аналог списків, але їхня особливість у тому, що вони незмінні. Модифікувати кортежі не можна.

Кортежі позначаються низкою елементів, розділених комами, і їх поміщають у круглі дужки або обходяться без них. Вони в основному використовуються, коли оператор або функція користувача повинні знати, що набір значень напевно не зміниться.

Щоб створити порожній кортеж, є два способи

my_tuple = tuple()
another_tuple = ()
Створення непустих кортежів відбувається так:

not_empty = (1, 2, 3)
other_tuple = 4, 5
Майже все, що можна зробити зі списком, не вносячи до нього змін, можна робити з кортежем. Доступ до елементів кортежу відбувається за індексом за допомогою синтаксису квадратних дужок:

not_empty = (1, 2, 3)
not_empty[0]  # 1
not_empty[1]  # 2
not_empty[2]  # 3
Кортежі також забезпечують зручний засіб повернення кількох значень з функції.

Щоб створити кортеж з одним елементом, необхідно використати наступний синтаксис

single_tuple = (7,)
так Python розуміє, що це не математична операція, а створення кортежу з одним елементом.

Кортежі зручні у множинному привласненні

x, y = 1, 2  # x = 1, y = 2
x, y = y, x  # обмін значеннями між змінними x = 2, y = 1
"""
'''
У нас є список показників студентів групи – це список з отриманими балами з тестування. 
Необхідно поділити список на дві частини. Напишіть функцію split_list, яка приймає список (цілі числа), 
знаходить середнє значення бала у списку та ділить його на два списки. 
У перший потрапляють значення менше середнього, включаючи середнє значення, 
тоді як у другий — строго більше від середнього. Функція повертає кортеж цих двох списків. 
Для порожнього списку повертаємо два порожні списки.
'''
def split_list(grades):
    # Перевірка, чи список не порожній
    if not grades:
        return [], []

    # Знаходження середнього значення
    average_grade = sum(grades) / len(grades)

    # Розділення списку на два підсписки
    below_average = [grade for grade in grades if grade <= average_grade]
    above_average = [grade for grade in grades if grade > average_grade]

    return below_average, above_average

# Приклад використання:
students_grades = [80, 65, 90, 75, 85]
result_tuple = split_list(students_grades)
below_average_list, above_average_list = result_tuple

print("Бали менше або рівні середньому:", below_average_list)
print("Бали строго більші за середнє значення:", above_average_list)
# Ця функція використовує умовний списковий вираз для створення двох підсписків та повертає їх у вигляді кортежу. Якщо вихідний список порожній, функція повертає два порожніх списки.