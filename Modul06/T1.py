"""
ФАЙЛОВІ ДЕСКРИПТОРИ
У Python є абстракція над файлами — це покажчик на файл або файловий дескриптор. 
Нічого складного в цьому немає, це навпаки спрощує роботу з багатьма системними ресурсами.

Файловий дескриптор — це системний ресурс, доступ до якого надає операційна система. 
Зазвичай файловий дескриптор можна відкрити (отримати/створити), закрити (повідомити систему, 
що робота з ним закінчена), можна записати у нього щось і прочитати щось.

ВІДКРИТТЯ ТА ЗАКРИТТЯ ФАЙЛІВ
Таким чином, робота з файлами у Python починається з відкриття файла або отримання від 
системи доступу до файлу, отримання того самого файлового дескриптора. 
Для цього є вбудована функція open, в яку треба обов'язково передати ім'я файлу, 
який ми хочемо відкрити, і можна вказати як саме ми хочемо файл відкрити:

fh = open('test_file.txt')
В цьому прикладі fh — це файловий дескриптор, спеціальний об'єкт, 
через який ми можемо працювати з файлом.

Після того, як робота з файлом завершена, треба повернути ресурс (файл) системі. 
Для цього у файлового дескриптора треба викликати метод close:

fh = open('test.txt')
fh.close()
Закривати файл треба обов'язково. 
Незакриті дескриптори можуть стати причиною великої кількості неочевидних проблем і складнощів. 
Найпростіший випадок — це зіпсований файл і повністю загублена інформація, яка в ньому могла міститися.

Крім того треба пам'ятати, що, оскільки файловий дескриптор — це ресурс, 
який надається операційною системою, то будь-яке завершення роботи додатку (аварійне або штатне) 
не означає закриття усіх відкритих фалів і, знову ж таки, може привести до помилок.

Якщо не вказати, як ми хочемо відкрити файл, 
то він відкривається тільки для читання і за допомогою fh можна буде тільки читати з файлу. 
Якщо файлу з ім'ям test_file.txt в системі немає, то ви отримаєте виключення.

Режими відкриття файлів в Python вибираються за допомогою другого аргументу функції open.

Можливі режими для відкриття файлів:

Режим	Значення
'r'	відкриття на читання (є значенням за замовчуванням).
'w'	відкриття на запис, вміст файлу видаляється, якщо файлу не існує, створюється новий.
'x'	відкриття на запис, якщо файлу не існує, інакше виключення.
'a'	відкриття на дозапис, інформація додається в кінець файлу.
'b'	відкриття у двійковому режимі.
't'	відкриття в текстовому режимі (є значенням за замовчуванням).
'+'	відкриття на читання та запис
ЧИТАННЯ ТА ЗАПИС У ФАЙЛ
Для запису у файл використовується метод write у дескриптора fh. 
Цей метод повертає кількість записаних у файл символів.

Парний до нього метод — це метод read, який дозволяє прочитати деяку кількість символів із файлу.

fh = open('test.txt', 'w+')
fh.write('hello!')
fh.seek(0)

first_two_symbols = fh.read(2)
print(first_two_symbols)  # 'he'

fh.close()
В цьому прикладі ми відкрили файл для читання та запису. Записали у файл рядок 'hello!' та 
прочитали перші два символи із файлу за допомогою методу read, вказавши у якості аргументу двійку.

Щоб повернути курсор на початок файла, викликали метод seek та передали йому позицію, 
куди треба переміститися (0).

Щоб прочитати весь вміст файлу за раз, можна викликати метод read без аргументів:

fh = open('test.txt', 'w')
fh.write('hello!')
fh.close()

fh = open('test.txt', 'r')
all_file = fh.read()
print(all_file)  # 'hello!'

fh.close()
Поки файловий дескриптор не закритий, ви можете читати із нього частинами, 
продовжуючи читання з того ж місця, на якому зупинилися:

fh = open('test.txt', 'w')
fh.write('hello!')
fh.close()

fh = open('test.txt', 'r')
while True:
    symbol = fh.read(1)
    if len(symbol) == 0:
        break
    print(symbol)

fh.close()
В цьому прикладі у циклі ми зчитували та виводили у консоль вміст файлу по одному символу за раз. 
В результаті ви отримаєте у консолі:

h
e
l
l
o
!
Ще є зручний спосіб читати файл порядково, по одному рядку за раз, 
для цього можна скористатися методом readline:

fh = open('test.txt', 'w')
fh.write('first line\nsecond line\nthird line')
fh.close()

fh = open('test.txt', 'r')
while True:
    line = fh.readline()
    if not line:
        break
    print(line)

fh.close()
В консолі буде вивід:

first line

second line

third line
Та аналогічний метод readlines, який читає весь файл повністю, але повертає список рядків, 
де елемент списку — це один рядок

fh = open('test.txt', 'w')
fh.write('first line\nsecond line\nthird line')
fh.close()

fh = open('test.txt', 'r')
lines = fh.readlines()
print(lines)

fh.close()
Вивід у консолі буде:

['first line\n', 'second line\n', 'third line']
Зверніть увагу, що всі методи, які читають файли порядково, не опускають (видаляють) 
символ переносу рядка.
"""
'''
Нехай ми маємо текстовий файл, який містить дані з місячною заробітною платою по кожному 
розробнику компанії.

Приклад файлу:

Alex Korp,3000
Nikita Borisenko,2000
Sitarama Raju,1000
Як бачимо, структура файлу – це прізвище розробника та значення його заробітної плати, розділеної комою.

Розробіть функцію total_salary(path) (параметр path - шлях до файлу), 
яка буде розбирати текстовий файл і повертати загальну суму заробітної плати всіх розробників компанії.

Вимоги до завдання:

функція total_salary повертає значення типу float
для читання файлу функція total_salary використовує лише метод readline
ми поки що не використовуємо менеджер контексту with.

STARTING CODE:

def total_salary(path):
    
'''
def total_salary(path):
    # Відкриваємо файл за вказаним шляхом для читання
    file = open(path, 'r')
    
    # Ініціалізуємо змінну для суми заробітних плат
    total_salary = 0
    
    # Цикл для читання рядків файлу
    while True:
        # Читаємо рядок
        line = file.readline()
        
        # Якщо рядок пустий (кінець файлу), виходимо з циклу
        if not line:
            break
        
        # Розділяємо рядок на прізвище та заробітну плату
        name, salary_str = line.strip().split(',')
        
        # Перетворюємо заробітну плату у число та додаємо до загальної суми
        total_salary += float(salary_str)
    
    # Закриваємо файл
    file.close()
    
    # Повертаємо загальну суму заробітних плат
    return total_salary
'''
# Приклад виклику функції
path_to_file = 'path/to/your/file.txt'  # Замініть це на шлях до вашого файлу
result = total_salary(path_to_file)
print(f'Total Salary: {result}')
#   Ця функція total_salary відкриває текстовий файл за вказаним шляхом, 
    читає його рядок за рядком, розбирає прізвище та заробітну плату кожного розробника, 
    і підраховує загальну суму заробітних плат. Зверніть увагу, 
    що дана функція використовує лише метод readline, 
    але не використовує менеджер контексту with (для простоти).
'''